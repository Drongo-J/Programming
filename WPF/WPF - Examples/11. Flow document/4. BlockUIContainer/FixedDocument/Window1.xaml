<Window x:Class="FlowDocument.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Документ нефиксированного формата" Height="300" Width="300">
    <FlowDocumentReader>
        <FlowDocument IsHyphenationEnabled="True">
            <BlockUIContainer>
                <StackPanel HorizontalAlignment="Center">
                    <TextBlock FontSize="20" TextWrapping="WrapWithOverflow" HorizontalAlignment="Center">
                       UI(User Interface)
                    </TextBlock>
                </StackPanel>  
            </BlockUIContainer>
             <Paragraph>
                Интерфейс пользователя - эта та часть программы, которая находится у всех на виду. Некоторые программисты склонны оставлять дизайн интерфейса пользователя на потом, считая, что реальное достоинство приложения - его программный код. Который и требует большего внимания. Однако часто возникает недовольство пользователей из-за неудачно подобранных шрифтов, непонятного содержимого экрана и скорости его прорисовывания, поэтому работу над интерфейсом также нужно воспринимать серьезно. Пользователь не видит, программного кода, зато интерфейс (хороший или плохой) всегда перед ним.
                Формы - это строительные блоки интерфейса пользователя. Хороший дизайн форм включает нечто большее, чем просто добавление элементов управления и программирование процедур обработки событии. Чтобы создать хорошо спроектированную форму, вы должны уяснить ее назначение, способ и время использования, а также ее связи с другими элементами программы. Кроме того в приложении может находиться несколько форм, каждая из которых будет отображаться по мере необходимости. Одни пользователи широко используют многозадачность Windows, другие предпочитают работать только с одним приложением. Необходимо помнить об этом во время разработки интерфейса пользователя (UI) Вы должны максимально реализовать все возможности Windows, чтобы пользователи с любыми навыками работы могли эффективно применять созданное вами приложение.
            </Paragraph>
            <BlockUIContainer>
                <StackPanel HorizontalAlignment="Center">
                    <TextBlock FontSize="20" TextWrapping="WrapWithOverflow" HorizontalAlignment="Center">Проектирование форм ввода данных</TextBlock>
                </StackPanel>
            </BlockUIContainer>
            <Paragraph>
                Особый вид форм - формы, предназначенные для ввода данных. Они позволяют пользователь в нужном ему темпе, не оглядываясь на программиста. Общий смысл и основное правы: если пользователь собирается ввести в базу данных 10000 записей, вероятно, он не подтверждать ввод каждой записи. В форме ввода данных необходимо максимально использовать свободное пространство, поскольку открытие и закрытие дополнительных форм существенно замедляет работу. При разработке форм ввода данных основное внимание следует уделить скорости их работы. Чтобы максимально ускорить процесс ввода данных, следуйте приведенным ниже основным правилам.
            </Paragraph>
            <List MarkerStyle="Circle">
                <ListItem>
                    <Paragraph>
                        Всегда назначайте клавиатурные эквиваленты команд; не требуйте обязательного использования мыши. (Кстати, этот совет хорош для всех форм программы, а не только для форм ввода данных.)
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        Расположение элементов должно быть согласовано с задачами пользователя. Другими словами, не заставляйте пользователя перепрыгивать из раздела в раздел; при вводе информации это совсем не обязательно.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        Не заставляйте пользователя выполнять лишнюю работу. Другими словами, если информация, содержащаяся в полях со 2-го по 10-е, необходима только, когда первое поле имеет определенное значение, не нужно заставлять пользователя заполнять все поля подряд. же время, не ставьте работу формы в зависимость от содержимого отдельных полей. В противном случае это может существенно замедлить работу пользователя.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        Используйте заметную, но ненавязчивую обратную связь с пользователем. Хороший пример - работа редактора программного кода Visual Studio, который проверяет правильность написания переменных и констант.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        Если возможно, выполняйте добавление и редактирование записей в одной и той же форме, тогда пользователю не придется осваивать несколько методов доступа к одним и тем желанным.
                    </Paragraph>
                </ListItem>
           </List>
        </FlowDocument>
    </FlowDocumentReader>        
</Window>
